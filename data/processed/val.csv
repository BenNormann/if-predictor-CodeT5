"target","masked_code"
"if self._maxusage and con.usage_count > self._maxusage: <TAB> self._connections -=1 <TAB> logging.debug('dropping connection %s uses past max usage %s' % (con.usage_count, self._maxusage)) <TAB> con._close() <TAB> return","<mask>: <TAB> self._connections -=1 <TAB> logging.debug('dropping connection %s uses past max usage %s' % (con.usage_count, self._maxusage)) <TAB> con._close() <TAB> return"
"if isinstance(item, FunctionDef): <TAB> methods[ item.name ] = item <TAB> finfo = inspect_method( item ) <TAB> props.update( finfo['properties'] ) <TAB> if item.name != '__init__': <TAB> <TAB> method_list.append( item ) <TAB> continue <TAB> item.args.args = item.args.args[1:]   <TAB> for n in finfo['name_nodes']: <TAB> <TAB> if n.id == 'self': <TAB> <TAB> <TAB> n.id = 'this'","<mask>: <TAB> methods[ item.name ] = item <TAB> finfo = inspect_method( item ) <TAB> props.update( finfo['properties'] ) <TAB> if item.name != '__init__': <TAB> <TAB> method_list.append( item ) <TAB> continue <TAB> item.args.args = item.args.args[1:]   <TAB> for n in finfo['name_nodes']: <TAB> <TAB> if n.id == 'self': <TAB> <TAB> <TAB> n.id = 'this'"
"if not setup_occurred(): <TAB> Status.load_defaults() <TAB> Image.load_defaults() <TAB> api.invalidate_cache() <TAB> finish_setup()","<mask>: <TAB> Status.load_defaults() <TAB> Image.load_defaults() <TAB> api.invalidate_cache() <TAB> finish_setup()"
"if type(ob) == 'string': <TAB> return string.len(ob)","<mask>: <TAB> return string.len(ob)"
"if rp: <TAB> view_def = rp.scalar() <TAB> return view_def","<mask>: <TAB> view_def = rp.scalar() <TAB> return view_def"
"if 'template' in f: <TAB> logging.warning('file template {0} won\'t appear in generated ' <TAB> <TAB> <TAB> <TAB> <TAB> 'CloudFormation templates'.format(pathname)) <TAB> del b2.files[pathname]","<mask>: <TAB> logging.warning('file template {0} won\'t appear in generated ' <TAB> <TAB> <TAB> <TAB> <TAB> 'CloudFormation templates'.format(pathname)) <TAB> del b2.files[pathname]"
"if instanceof(a, String): <TAB> buff = new( StringBuffer() ) <TAB> n = a.length - 1 <TAB> while n >= 0: <TAB> <TAB> buff.write( a[n] ) <TAB> <TAB> n -= 1 <TAB> return buff.toString()","<mask>: <TAB> buff = new( StringBuffer() ) <TAB> n = a.length - 1 <TAB> while n >= 0: <TAB> <TAB> buff.write( a[n] ) <TAB> <TAB> n -= 1 <TAB> return buff.toString()"
"if self._user_info is None: <TAB> resp, content = self.request('https://api.github.com/user') <TAB> self._user_info = json.loads(content)","<mask>: <TAB> resp, content = self.request('https://api.github.com/user') <TAB> self._user_info = json.loads(content)"
"if match: <TAB> includes.append(line) <TAB> sketch.append('//' + line)","<mask>: <TAB> includes.append(line) <TAB> sketch.append('//' + line)"
"if hasattr(self.model, 'index'): <TAB> mdat = np.ma.masked_array(self.model.index, np.isnan(self.model.index))","<mask>: <TAB> mdat = np.ma.masked_array(self.model.index, np.isnan(self.model.index))"
"if ulib in dep_libs: <TAB> used_libs.append(used_libs.pop(i)) <TAB> dep_libs.remove(ulib)","<mask>: <TAB> used_libs.append(used_libs.pop(i)) <TAB> dep_libs.remove(ulib)"
"if self.options.verbose or is_block: <TAB> say_line('%s %s%s, %s', (miner.id(), 'block ' if is_block else '', hash_, 'accepted' if accepted else '_rejected_'))","<mask>: <TAB> say_line('%s %s%s, %s', (miner.id(), 'block ' if is_block else '', hash_, 'accepted' if accepted else '_rejected_'))"
"if element.tag == '{%s}t' % nsprefixes['w']: <TAB> if element.text: <TAB> <TAB> if searchre.search(element.text): <TAB> <TAB> <TAB> element.text = re.sub(search, replace, element.text)","<mask>: <TAB> if element.text: <TAB> <TAB> if searchre.search(element.text): <TAB> <TAB> <TAB> element.text = re.sub(search, replace, element.text)"
"if instanceof(ob, Object): <TAB> return JS(""Object.keys( ob )"")","<mask>: <TAB> return JS(""Object.keys( ob )"")"
"if node.args: <TAB> args = map(self.visit, node.args) <TAB> out = ', '.join(args) <TAB> return '[%s]' % out","<mask>: <TAB> args = map(self.visit, node.args) <TAB> out = ', '.join(args) <TAB> return '[%s]' % out"
"if isinstance(node.slice, ast.Ellipsis): <TAB> if self._glsl: <TAB> <TAB> return '%s[matrix_index()]' % self.visit(node.value) <TAB> else: <TAB> <TAB> return self._visit_subscript_ellipsis( node )","<mask>: <TAB> if self._glsl: <TAB> <TAB> return '%s[matrix_index()]' % self.visit(node.value) <TAB> else: <TAB> <TAB> return self._visit_subscript_ellipsis( node )"
"if instanceof(ob, Array): <TAB> def func(index, item): <TAB> <TAB> postMessage({'type':'__setitem__', 'index':index, 'value':item, 'argindex':argindex}) <TAB> <TAB> Array.prototype.__setitem__.call(ob, index, item) <TAB> Object.defineProperty(ob, ""__setitem__"", {""enumerable"":False, ""value"":func, ""writeable"":True, ""configurable"":True}) <TAB> def func(item): <TAB> <TAB> postMessage({'type':'append', 'value':item, 'argindex':argindex}) <TAB> <TAB> Array.prototype.push.call(ob, item) <TAB> Object.defineProperty(ob, ""append"", {""enumerable"":False, ""value"":func, ""writeable"":True, ""configurable"":True})","<mask>: <TAB> def func(index, item): <TAB> <TAB> postMessage({'type':'__setitem__', 'index':index, 'value':item, 'argindex':argindex}) <TAB> <TAB> Array.prototype.__setitem__.call(ob, index, item) <TAB> Object.defineProperty(ob, ""__setitem__"", {""enumerable"":False, ""value"":func, ""writeable"":True, ""configurable"":True}) <TAB> def func(item): <TAB> <TAB> postMessage({'type':'append', 'value':item, 'argindex':argindex}) <TAB> <TAB> Array.prototype.push.call(ob, item) <TAB> Object.defineProperty(ob, ""append"", {""enumerable"":False, ""value"":func, ""writeable"":True, ""configurable"":True})"
"if args != None: <TAB> i = 0 <TAB> while i < args.length: <TAB> <TAB> arg = args[i] <TAB> <TAB> if arg and typeof(arg) == 'object': <TAB> <TAB> <TAB> if arg.jsify: <TAB> <TAB> <TAB> <TAB> args[i] = arg.jsify() <TAB> <TAB> i += 1","<mask>: <TAB> i = 0 <TAB> while i < args.length: <TAB> <TAB> arg = args[i] <TAB> <TAB> if arg and typeof(arg) == 'object': <TAB> <TAB> <TAB> if arg.jsify: <TAB> <TAB> <TAB> <TAB> args[i] = arg.jsify() <TAB> <TAB> i += 1"
"if not self.context.isinsert: <TAB> raise exc.InvalidRequestError( <TAB> <TAB> <TAB> <TAB> ""Statement is not an insert() expression construct."")","<mask>: <TAB> raise exc.InvalidRequestError( <TAB> <TAB> <TAB> <TAB> ""Statement is not an insert() expression construct."")"
"if not collectionname or "".."" in collectionname: <TAB> raise DataError(""collection names cannot be empty"")","<mask>: <TAB> raise DataError(""collection names cannot be empty"")"
"if negate and os.path.isdir(pathname) \","<mask>"
"if node.lower: <TAB> lower = self.visit(node.lower)","<mask>: <TAB> lower = self.visit(node.lower)"
"if field_selector is not None: <TAB> data += bson.BSON.encode(field_selector)","<mask>: <TAB> data += bson.BSON.encode(field_selector)"
"if index < 0: index = self.length + index","<mask>: index = self.length + index"
"if request.GET: <TAB> stop_word_list = re.compile(STOP_WORDS_RE, re.IGNORECASE) <TAB> search_term = '%s' % request.GET['q'] <TAB> cleaned_search_term = stop_word_list.sub('', search_term) <TAB> cleaned_search_term = cleaned_search_term.strip() <TAB> if len(cleaned_search_term) != 0: <TAB> <TAB> post_list = Post.objects.published().filter(Q(title__icontains=cleaned_search_term) | Q(body__icontains=cleaned_search_term) | Q(tags__icontains=cleaned_search_term) | Q(categories__title__icontains=cleaned_search_term)) <TAB> <TAB> context = {'object_list': post_list, 'search_term':search_term} <TAB> else: <TAB> <TAB> message = 'Search term was too vague. Please try again.' <TAB> <TAB> context = {'message':message}","<mask>: <TAB> stop_word_list = re.compile(STOP_WORDS_RE, re.IGNORECASE) <TAB> search_term = '%s' % request.GET['q'] <TAB> cleaned_search_term = stop_word_list.sub('', search_term) <TAB> cleaned_search_term = cleaned_search_term.strip() <TAB> if len(cleaned_search_term) != 0: <TAB> <TAB> post_list = Post.objects.published().filter(Q(title__icontains=cleaned_search_term) | Q(body__icontains=cleaned_search_term) | Q(tags__icontains=cleaned_search_term) | Q(categories__title__icontains=cleaned_search_term)) <TAB> <TAB> context = {'object_list': post_list, 'search_term':search_term} <TAB> else: <TAB> <TAB> message = 'Search term was too vague. Please try again.' <TAB> <TAB> context = {'message':message}"
"if not hasattr(self, '_pools'): <TAB> self._pools = {}","<mask>: <TAB> self._pools = {}"
"if instanceof(ob, Object) or ob.items is undefined: <TAB> arr = [] <TAB> for key in ob: <TAB> <TAB> if Object.hasOwnProperty.call(ob, key): <TAB> <TAB> <TAB> value = ob[key] <TAB> <TAB> <TAB> arr.push( [key,value] ) <TAB> return arr","<mask>: <TAB> arr = [] <TAB> for key in ob: <TAB> <TAB> if Object.hasOwnProperty.call(ob, key): <TAB> <TAB> <TAB> value = ob[key] <TAB> <TAB> <TAB> arr.push( [key,value] ) <TAB> return arr"
"if ADL_Overdrive5_Temperature_Get(self.adapterIndex, 0, byref(temperature)) == ADL_OK: <TAB> return temperature.iTemperature/1000.0","<mask>: <TAB> return temperature.iTemperature/1000.0"
"if user: <TAB> login(request, user) <TAB> return HttpResponseRedirect(LOGIN_REDIRECT_URL)","<mask>: <TAB> login(request, user) <TAB> return HttpResponseRedirect(LOGIN_REDIRECT_URL)"
"if len(sys.argv) > 1: <TAB> for arg in sys.argv[1:]: <TAB> <TAB> if arg.endswith('.py'): <TAB> <TAB> <TAB> scripts.append( arg )","<mask>: <TAB> for arg in sys.argv[1:]: <TAB> <TAB> if arg.endswith('.py'): <TAB> <TAB> <TAB> scripts.append( arg )"
"if getattr(settings, 'OPENID_PAPE', False): <TAB> openid.pape = PapeResponse.fromSuccessResponse(openid_response)","<mask>: <TAB> openid.pape = PapeResponse.fromSuccessResponse(openid_response)"
"if skip_self: nargs = node.args.args[1:]","<mask>: nargs = node.args.args[1:]"
"if node.id == 'None': <TAB> return 'null'","<mask>: <TAB> return 'null'"
"if self.authorization_failed: <TAB> return False","<mask>: <TAB> return False"
"if comma_delimited: <TAB> for t in item.tags.split(','): <TAB> <TAB> if t.strip(' ') == tag.name: <TAB> <TAB> <TAB> results.append(item)","<mask>: <TAB> for t in item.tags.split(','): <TAB> <TAB> if t.strip(' ') == tag.name: <TAB> <TAB> <TAB> results.append(item)"
"if len(args) > 1: <TAB> s = 'print([%s]);' % ', '.join(args)","<mask>: <TAB> s = 'print([%s]);' % ', '.join(args)"
"if not self.valid_version(version): <TAB> self.error(404, ""API Version %s not supported"" % version) <TAB> return","<mask>: <TAB> self.error(404, ""API Version %s not supported"" % version) <TAB> return"
"if a is None: a = value","<mask>: a = value"
"if not user: <TAB> if self.request.method != 'GET': <TAB> <TAB> logging.debug(""Not user - aborting"") <TAB> <TAB> self.error(403) <TAB> else: <TAB> <TAB> logging.debug(""User not logged in -- force login"") <TAB> <TAB> self.redirect(users.create_login_url(self.request.uri))","<mask>: <TAB> if self.request.method != 'GET': <TAB> <TAB> logging.debug(""Not user - aborting"") <TAB> <TAB> self.error(403) <TAB> else: <TAB> <TAB> logging.debug(""User not logged in -- force login"") <TAB> <TAB> self.redirect(users.create_login_url(self.request.uri))"
"if attr in base: <TAB> return base[ attr ]","<mask>: <TAB> return base[ attr ]"
"if not isinstance(safe, bool): <TAB> raise TypeError(""safe must be an instance of bool"")","<mask>: <TAB> raise TypeError(""safe must be an instance of bool"")"
"if PYTHON=='PYTHONJS': <TAB> pythonjs.configure( direct_operator='+' ) <TAB> pythonjs.configure( direct_operator='*' ) <TAB> pythonjs.configure( direct_keys=True ) <TAB> pass","<mask>: <TAB> pythonjs.configure( direct_operator='+' ) <TAB> pythonjs.configure( direct_operator='*' ) <TAB> pythonjs.configure( direct_keys=True ) <TAB> pass"
"if i in cache: <TAB> pass","<mask>: <TAB> pass"
"if self._supports_char_length: <TAB> char_length_col = 'char_length'","<mask>: <TAB> char_length_col = 'char_length'"
"if orelse: <TAB> out.append( self.indent() + 'else') <TAB> out.extend( orelse )","<mask>: <TAB> out.append( self.indent() + 'else') <TAB> out.extend( orelse )"
"if ticks > 100000: <TAB> break","<mask>: <TAB> break"
"if upsert: <TAB> options += 1","<mask>: <TAB> options += 1"
"if self.is_negative is None: self.is_negative = (""@negative"" in self.GetRawContents())","<mask>: self.is_negative = (""@negative"" in self.GetRawContents())"
"if not invitation: <TAB> return invitation_error(request, ""This invitation is no longer valid."")","<mask>: <TAB> return invitation_error(request, ""This invitation is no longer valid."")"
"if self.model.has_preference_values(): <TAB> source_preferences, target_preferences = \ <TAB> <TAB> find_common_elements(source_preferences, target_preferences)","<mask>: <TAB> source_preferences, target_preferences = \ <TAB> <TAB> find_common_elements(source_preferences, target_preferences)"
"if sampling is None: <TAB> sampling = 1.0","<mask>: <TAB> sampling = 1.0"
"if evt.dataTransfer.files.length==0: <TAB> url = evt.dataTransfer.getData(""text/plain"") <TAB> self.open_iframe(url)","<mask>: <TAB> url = evt.dataTransfer.getData(""text/plain"") <TAB> self.open_iframe(url)"
"if self._requirejs and not self._webworker: <TAB> header.extend([ <TAB> <TAB> 'define( function(){', <TAB> <TAB> '__module__ = {}' <TAB> ])","<mask>: <TAB> header.extend([ <TAB> <TAB> 'define( function(){', <TAB> <TAB> '__module__ = {}' <TAB> ])"
"if reversed_ < target[i]: <TAB> return True","<mask>: <TAB> return True"
"if request.user.is_authenticated(): <TAB> return self.error_to_response(request, dict( <TAB> <TAB> error=_(""You are already logged in."")))","<mask>: <TAB> return self.error_to_response(request, dict( <TAB> <TAB> error=_(""You are already logged in."")))"
"if d <= 0.0: <TAB> return 0.0","<mask>: <TAB> return 0.0"
"if t == 'string': <TAB> if ob.indexOf(a) == -1: return False <TAB> else: return True","<mask>: <TAB> if ob.indexOf(a) == -1: return False <TAB> else: return True"
"if 200 == r.status: <TAB> b = Blueprint.load(r, name) <TAB> for filename in b.sources.itervalues(): <TAB> <TAB> logging.info('fetching source tarballs - this may take a while') <TAB> <TAB> r = http.get('/{0}/{1}/{2}'.format(secret, name, filename), <TAB> <TAB> <TAB> <TAB> <TAB> server=server) <TAB> <TAB> if 200 == r.status: <TAB> <TAB> <TAB> try: <TAB> <TAB> <TAB> <TAB> f = open(filename, 'w') <TAB> <TAB> <TAB> <TAB> f.write(r.read()) <TAB> <TAB> <TAB> except OSError: <TAB> <TAB> <TAB> <TAB> logging.error('could not open {0}'.format(filename)) <TAB> <TAB> <TAB> <TAB> return None <TAB> <TAB> <TAB> finally: <TAB> <TAB> <TAB> <TAB> f.close() <TAB> <TAB> elif 404 == r.status: <TAB> <TAB> <TAB> logging.error('{0} not found'.format(filename)) <TAB> <TAB> <TAB> return None <TAB> <TAB> elif 502 == r.status: <TAB> <TAB> <TAB> logging.error('upstream storage service failed') <TAB> <TAB> <TAB> return None <TAB> <TAB> else: <TAB> <TAB> <TAB> logging.error('unexpected {0} fetching tarball'. <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> format(r.status)) <TAB> <TAB> <TAB> return None <TAB> return b","<mask>: <TAB> b = Blueprint.load(r, name) <TAB> for filename in b.sources.itervalues(): <TAB> <TAB> logging.info('fetching source tarballs - this may take a while') <TAB> <TAB> r = http.get('/{0}/{1}/{2}'.format(secret, name, filename), <TAB> <TAB> <TAB> <TAB> <TAB> server=server) <TAB> <TAB> if 200 == r.status: <TAB> <TAB> <TAB> try: <TAB> <TAB> <TAB> <TAB> f = open(filename, 'w') <TAB> <TAB> <TAB> <TAB> f.write(r.read()) <TAB> <TAB> <TAB> except OSError: <TAB> <TAB> <TAB> <TAB> logging.error('could not open {0}'.format(filename)) <TAB> <TAB> <TAB> <TAB> return None <TAB> <TAB> <TAB> finally: <TAB> <TAB> <TAB> <TAB> f.close() <TAB> <TAB> elif 404 == r.status: <TAB> <TAB> <TAB> logging.error('{0} not found'.format(filename)) <TAB> <TAB> <TAB> return None <TAB> <TAB> elif 502 == r.status: <TAB> <TAB> <TAB> logging.error('upstream storage service failed') <TAB> <TAB> <TAB> return None <TAB> <TAB> else: <TAB> <TAB> <TAB> logging.error('unexpected {0} fetching tarball'. <TAB> <TAB> <TAB> <TAB> <TAB> <TAB> format(r.status)) <TAB> <TAB> <TAB> return None <TAB> return b"
"if message.to_user == request.user: <TAB> message.to_status = TO_STATUS_READ <TAB> message.save()","<mask>: <TAB> message.to_status = TO_STATUS_READ <TAB> message.save()"
"if self._function_stack: <TAB> fnode = self._function_stack[-1] <TAB> rem = [] <TAB> for arg in args: <TAB> <TAB> if arg in fnode._local_vars: <TAB> <TAB> <TAB> rem.append( arg ) <TAB> <TAB> else: <TAB> <TAB> <TAB> fnode._local_vars.add( arg ) <TAB> for arg in rem: <TAB> <TAB> args.remove( arg )","<mask>: <TAB> fnode = self._function_stack[-1] <TAB> rem = [] <TAB> for arg in args: <TAB> <TAB> if arg in fnode._local_vars: <TAB> <TAB> <TAB> rem.append( arg ) <TAB> <TAB> else: <TAB> <TAB> <TAB> fnode._local_vars.add( arg ) <TAB> for arg in rem: <TAB> <TAB> args.remove( arg )"
"if callback_url: <TAB> parameters= {'oauth_callback':callback_url}","<mask>: <TAB> parameters= {'oauth_callback':callback_url}"
"if property in ('yes', 'important', 'required', 'standard'): <TAB> s.add(package)","<mask>: <TAB> s.add(package)"
"if IsDst(middle) == IsDst(start): start = middle","<mask>: start = middle"
"if runaway == 0 and x * x + y * y > 100.0: <TAB> runaway = i","<mask>: <TAB> runaway = i"
"if user: <TAB> login(request, user) <TAB> return HttpResponseRedirect(LOGIN_REDIRECT_URL)","<mask>: <TAB> login(request, user) <TAB> return HttpResponseRedirect(LOGIN_REDIRECT_URL)"
"if not oauth_token or not oauth_verifier or not request_secret: <TAB> self.error(400) <TAB> self.response.out.write(""Missing data"") <TAB> return","<mask>: <TAB> self.error(400) <TAB> self.response.out.write(""Missing data"") <TAB> return"
"if request.method == 'POST': <TAB> form = GroupTopicForm(request.POST) <TAB> if form.is_valid(): <TAB> <TAB> topic = form.save(commit=False) <TAB> <TAB> topic.user = request.user <TAB> <TAB> topic.group = group <TAB> <TAB> topic.save() <TAB> <TAB> return redirect(request, topic)","<mask>: <TAB> form = GroupTopicForm(request.POST) <TAB> if form.is_valid(): <TAB> <TAB> topic = form.save(commit=False) <TAB> <TAB> topic.user = request.user <TAB> <TAB> topic.group = group <TAB> <TAB> topic.save() <TAB> <TAB> return redirect(request, topic)"
"if not response['status'] == '200': <TAB> raise OAuthError(_( <TAB> <TAB> u""Invalid status code %s while obtaining access token from %s: %s"") %  <TAB> <TAB> (response['status'], self.access_token_url, content))","<mask>: <TAB> raise OAuthError(_( <TAB> <TAB> u""Invalid status code %s while obtaining access token from %s: %s"") %  <TAB> <TAB> (response['status'], self.access_token_url, content))"
"if np.isnan(v): <TAB> s += ""---"".center(cellWidth)","<mask>: <TAB> s += ""---"".center(cellWidth)"
"if next: <TAB> redirect_url = next","<mask>: <TAB> redirect_url = next"
"if not self.valid_version(version): <TAB> self.error(404, ""API Version %s not supported"" % version) <TAB> return","<mask>: <TAB> self.error(404, ""API Version %s not supported"" % version) <TAB> return"
"if ERROR_VIEW: <TAB> return self.import_attribute(ERROR_VIEW)(request, error_dict, **context)","<mask>: <TAB> return self.import_attribute(ERROR_VIEW)(request, error_dict, **context)"
"if len(self._funcs): <TAB> self._funcs[-1]._loops.append( node )","<mask>: <TAB> self._funcs[-1]._loops.append( node )"
"if request.method == 'POST': <TAB> message.is_active = False <TAB> message.save() <TAB> return redirect(request, message.topic)","<mask>: <TAB> message.is_active = False <TAB> message.save() <TAB> return redirect(request, message.topic)"
"if isinstance( node.context_expr, Name ) and node.context_expr.id == '__default__': <TAB> r.append('default:')","<mask>: <TAB> r.append('default:')"
"if node.type and node.name: <TAB> writer.write('except %s, %s:' % (self.visit(node.type), self.visit(node.name)))","<mask>: <TAB> writer.write('except %s, %s:' % (self.visit(node.type), self.visit(node.name)))"
"if dataset: <TAB> key = dataset.keys()[0] <TAB> if isinstance(dataset[key], dict): <TAB> <TAB> for key in dataset: <TAB> <TAB> <TAB> dataset[key] = dataset[key].keys()","<mask>: <TAB> key = dataset.keys()[0] <TAB> if isinstance(dataset[key], dict): <TAB> <TAB> for key in dataset: <TAB> <TAB> <TAB> dataset[key] = dataset[key].keys()"
"if self.exists( path ): <TAB> with javascript: <TAB> <TAB> stat = _fs.statSync( path ) <TAB> <TAB> if stat: <TAB> <TAB> <TAB> return stat.isFile() <TAB> <TAB> else: <TAB> <TAB> <TAB> return False","<mask>: <TAB> with javascript: <TAB> <TAB> stat = _fs.statSync( path ) <TAB> <TAB> if stat: <TAB> <TAB> <TAB> return stat.isFile() <TAB> <TAB> else: <TAB> <TAB> <TAB> return False"
"if load_timestamp: <TAB> data_m = np.loadtxt(base_dir + 'movielens100k.data', <TAB> <TAB> <TAB> delimiter='\t', dtype=int) <TAB> data_movies = {} <TAB> for user_id, item_id, rating, timestamp in data_m: <TAB> <TAB> data_movies.setdefault(user_id, {}) <TAB> <TAB> data_movies[user_id][item_id] = (timestamp, int(rating))","<mask>: <TAB> data_m = np.loadtxt(base_dir + 'movielens100k.data', <TAB> <TAB> <TAB> delimiter='\t', dtype=int) <TAB> data_movies = {} <TAB> for user_id, item_id, rating, timestamp in data_m: <TAB> <TAB> data_movies.setdefault(user_id, {}) <TAB> <TAB> data_movies[user_id][item_id] = (timestamp, int(rating))"
"if self._user_info is None: <TAB> self._user_info = json.loads( <TAB> <TAB> self.request('http://api.tumblr.com/v2/user/info'))['response']['user']","<mask>: <TAB> self._user_info = json.loads( <TAB> <TAB> self.request('http://api.tumblr.com/v2/user/info'))['response']['user']"
"if target_ids.size == 0: <TAB> return np.array([])","<mask>: <TAB> return np.array([])"
"if user.is_anonymous(): <TAB> return False","<mask>: <TAB> return False"
"if (is_cookie_check and key.startswith(API_KEY + '_')): <TAB> signature_keys.append(key)","<mask>: <TAB> signature_keys.append(key)"
"if not job_id in self.jobs: <TAB> return True","<mask>: <TAB> return True"
"if not a: <TAB> b = True","<mask>: <TAB> b = True"
"if work: <TAB> if not 'target' in work: <TAB> <TAB> work['target'] = '0000000000000000000000000000000000000000000000000000ffff00000000' <TAB> self.switch.queue_work(self, work['data'], work['target'], miner=miner)","<mask>: <TAB> if not 'target' in work: <TAB> <TAB> work['target'] = '0000000000000000000000000000000000000000000000000000ffff00000000' <TAB> self.switch.queue_work(self, work['data'], work['target'], miner=miner)"
"if isinstance(target, ast.Tuple): <TAB> elts = [self.visit(e) for e in target.elts] <TAB> return '%s = %s' % (','.join(elts), self.visit(node.value))","<mask>: <TAB> elts = [self.visit(e) for e in target.elts] <TAB> return '%s = %s' % (','.join(elts), self.visit(node.value))"
"if sparse_format not in (None, 'csr', 'csc'): <TAB> raise ValueError('Unexpected sparse format: %r' % sparse_format)","<mask>: <TAB> raise ValueError('Unexpected sparse format: %r' % sparse_format)"
"if instanceof( ob, Int8Array ) or instanceof( ob, Uint8Array ): <TAB> return True","<mask>: <TAB> return True"
"if not isinstance(s, set): <TAB> s = set([s])","<mask>: <TAB> s = set([s])"
"if fname=='__DOLLAR__': fname = '$'","<mask>: fname = '$'"
"if bases: <TAB> a = 'class %s %s'%(node.name, ','.join(bases))","<mask>: <TAB> a = 'class %s %s'%(node.name, ','.join(bases))"
"if res: writer.write( res )","<mask>: writer.write( res )"
"if dirname not in ('/etc', '/etc/init', '/etc/init.d'): <TAB> dirs[dirname].append(pathname)","<mask>: <TAB> dirs[dirname].append(pathname)"
"if instanceof(a, String): <TAB> return o.replaceAll(a,b)","<mask>: <TAB> return o.replaceAll(a,b)"
"if self.comment is not None: <TAB> comment, count = re.subn(r'#', '//', unicode(self.comment)) <TAB> w(comment)","<mask>: <TAB> comment, count = re.subn(r'#', '//', unicode(self.comment)) <TAB> w(comment)"
"if self.x < other.x: self.x = other.x","<mask>: self.x = other.x"
"if request.method == 'POST': <TAB> flag, created = Flag.objects.get_or_create(flag_type=flag_type, <TAB> <TAB> <TAB> content_type=content_type, object_id=obj.pk, user=request.user) <TAB> if request.is_ajax(): <TAB> <TAB> response = {'success': 'Success'} <TAB> <TAB> return HttpResponse(json.dumps(response), mimetype=""application/json"") <TAB> if request.GET.get('next', None): <TAB> <TAB> return HttpResponseRedirect(request.GET['next']) <TAB> template_name = success_template_name","<mask>: <TAB> flag, created = Flag.objects.get_or_create(flag_type=flag_type, <TAB> <TAB> <TAB> content_type=content_type, object_id=obj.pk, user=request.user) <TAB> if request.is_ajax(): <TAB> <TAB> response = {'success': 'Success'} <TAB> <TAB> return HttpResponse(json.dumps(response), mimetype=""application/json"") <TAB> if request.GET.get('next', None): <TAB> <TAB> return HttpResponseRedirect(request.GET['next']) <TAB> template_name = success_template_name"
"if hasattr(i, ""before_request""): <TAB> response = i.before_request(name, **request.view_args) <TAB> if response is not None: <TAB> <TAB> return response","<mask>: <TAB> response = i.before_request(name, **request.view_args) <TAB> if response is not None: <TAB> <TAB> return response"
"if callable(make_name): <TAB> altfname = make_name(fname)","<mask>: <TAB> altfname = make_name(fname)"
